1. 算法步骤
创建一个堆 H[0……n-1]；

把堆首（最大值）和堆尾互换；

把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；

重复步骤 2，直到堆的尺寸为 1。
def heapify(arr, n, i):
    # 找到当前节点、左子节点和右子节点中的最大值
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    if left < n and arr[left] > arr[largest]:
        largest = left
    if right < n and arr[right] > arr[largest]:
        largest = right

    # 如果最大值不是当前节点，交换并继续调整
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)

    # 构建最大堆
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # 逐个取出堆顶元素并调整堆
    for i in range(n - 1, 0, -1):
        arr[0], arr[i] = arr[i], arr[0]  # 交换堆顶元素和最后一个元素
        heapify(arr, i, 0)  # 调整堆

    return arr

# 示例
arr = [4, 10, 3, 5, 1]
sorted_arr = heap_sort(arr)
print(sorted_arr)  # 输出: [1, 3, 4, 5, 10]
构建最大堆：O(n)。

每次调整堆：O(log n)，总共需要调整 n-1 次。

总时间复杂度：O(n log n)。

空间复杂度
O(1)，堆排序是原地排序算法，不需要额外的存储空间。

优缺点
优点：

时间复杂度稳定为 O(n log n)，适合大规模数据。

原地排序，不需要额外的存储空间。

缺点：

不稳定排序算法（可能改变相同元素的相对顺序）。

对于小规模数据，性能可能不如插入排序等简单算法。
