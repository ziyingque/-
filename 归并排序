2. 算法步骤
申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；

设定两个指针，最初位置分别为两个已经排序序列的起始位置；

比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；

重复步骤 3 直到某一指针达到序列尾；

将另一序列剩下的所有元素直接复制到合并序列尾。
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    # 分解：将列表分成两半
    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])  # 递归排序左半部分
    right_half = merge_sort(arr[mid:])  # 递归排序右半部分

    # 合并：将两个有序子列表合并
    return merge(left_half, right_half)

def merge(left, right):
    sorted_arr = []
    i = j = 0

    # 比较两个子列表的元素，按顺序合并
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_arr.append(left[i])
            i += 1
        else:
            sorted_arr.append(right[j])
            j += 1

    # 将剩余的元素添加到结果中
    sorted_arr.extend(left[i:])
    sorted_arr.extend(right[j:])
    return sorted_arr

# 示例
arr = [38, 27, 43, 3, 9, 82, 10]
sorted_arr = merge_sort(arr)
print(sorted_arr)  # 输出: [3, 9, 10, 27, 38, 43, 82]
时间复杂度
分解：每次将列表分成两半，需要 O(log n) 层递归。

合并：每层递归需要 O(n) 的时间来合并子列表。

总时间复杂度：O(n log n)。

空间复杂度
O(n)，归并排序需要额外的空间来存储临时列表。

优缺点
优点：

时间复杂度稳定为 O(n log n)，适合大规模数据。

稳定排序算法（相同元素的相对顺序不会改变）。

适合外部排序（如对磁盘文件进行排序）。

缺点：

需要额外的存储空间，空间复杂度为 O(n)。

对于小规模数据，性能可能不如插入排序等简单算法。
